#########
#
# https://losst.ru/ustanovka-nginx-ubuntu-16-04
#
# events                      эта секция содержит настройки для работы с сетью.
# server                      в этой секции содержится настройка каждого размещенного на веб-сервере сайта.
# http                        содержит настройки веб-сервера. Должна содержать секцию servier для тонкой настройки каждого сайта.
# location                    секция location может находиться только внутри секции server и содержит настройки только для определенного запроса.
# mail                        содержит настройки почтового прокси.
#
# user                        пользователь, от имени которого будет работать программа.
# worker_processes            устанавливает сколько процессов нужно запускать для параллелизации работы программы, нужно запускать не больше процессов, чем у вас есть ядер. Можно установить параметр auto и тогда программа определит это число сама.
# pid                         файл pid программы.
# worker_rlimit_nofile        указывает максимальное количество файлов, которые может открыть программа. Рассчитывается как worker_processes * worker_connections* 2.
#
# worker_connections          количество соединений, которые программа может обрабатывать одновременно на одном процессе. Если умножить worker_process на этот параметр, то мы получим максимальное количество пользователей, которые могут подключиться к серверу одновременно. Рекомендуется устанавливать значение от 1024 до 4048.
# multi_accept                разрешить принимать много подключений одновременно, установите параметр on или off.
# use                         способ работы с сетевым стеком. По умолчанию используется poll, но для Linux эффективнее использовать epoll.
#
# sendfile                    использовать метод отправки данных sendfile. Значение on.
# tcp_nodelay, tcp_nopush     отправлять заголовки и начало файла одним пакетом. Значение on.
# keepalive_timeout           таймаут ожидания, перед тем как keepalive соединение будет разорвано, по умолчанию 65, но можно уменьшить до 10 секунд.
# keepalive_requests          максимальное количество keepalive соединений от одного клиента, рекомендовано 100.
# reset_timedout_connection   разрывать соединения после таймаута. Значение on.
# open_file_cache             кэшировать информацию об открытых файлах. Строчка настройки выглядит вот так: open_file_cache max=200000 inactive=20s; max - максимальное количество файлов в кэше, время кэширования.
# open_file_cache_valid       указывает по истечении какого времени нужно удалить информацию из кэша. Например: open_file_cache_valid 30s;
# open_file_cache_min_uses    кэшировать информацию о файлах, которые были открыты как минимум указанное количество раз.
# open_file_cache_errors      кэшировать информацию об отсутствующих файлах, значение on.
#
# gzip_min_length             минимальная длина страницы в байтах, при которой нужно использовать сжатие, например, 1000 (1 кб)
# gzip_proxied                нужно ли сжимать проксированые запросы, any говорит, что нужно сжимать все.
# gzip_types                  типы файлов, которые нужно сжимать, например: text/plain application/xml application/x-javascript text/javascript text/css text/json;
# gzip_disable "msie6"        в IE 6 сжатие не поддерживается, поэтому отключаем.
# gzip_comp_level             уровень сжатия, доступны варианты от 1 до 10. 1 - минимальное, 10 - максимальное сжатие.
#
#########

server {
    charset utf-8;
    client_max_body_size 128M;
    client_body_buffer_size 32m;

    # listen 80 - указывает, что нужно ожидать подключения на порту 80,
    # может также содержать опцию default-server, которая означает,
    # что этот домен будет открывается если домен не был задан в запросе.
    listen 80 default; ## listen for ipv4
    #listen [::]:80 default_server ipv6only=on; ## listen for ipv6

    # server_name - доменное имя сайта.
    server_name webx.lo;

    # access_log - файл для записи лога запросов к серверу, может использоваться как глобально в секции http, так и для определенного типа файлов в location.
    access_log  /var/log/nginx/access.log;# main buffer=50k;
    #access_log   off;

    # error_log - лог ошибок веб-сервера, может принимать дополнительный параметр, указывающий подробность лога. warn - максимум, crit - только критические ошибки.
    error_log   /var/log/nginx/error.log notice;

    #gzip on;
    #gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript application/javascript;

    rewrite (.+)/$ $1 redirect;

    set $base_root /srv/webx;
    set $base_path frontend;

    if ( $host ~ ^be ) {
        set $base_path backend;
        #access_log  /var/log/nginx/be_access.log;
        #error_log   /var/log/nginx/be_error.log;
    }

    # root - директория, в которой находятся файлы сайта.
    root $base_root/$base_path/web/;

    # index - страница, которая будет открываться по умолчанию.
    index       index.php index.html;

    # позволяет настроить поведение сервера для определенных директорий и файлов
    location / {
        # Redirect everything that isn't a real file to index.php
        try_files $uri $uri/ /index.php$is_args$args;

        # allow - разрешить доступ к местоположению для пользователей, all - всех, также можно указать ip или подсеть.
        # deny - запретить доступ к местоположению, all - для всех.
        # try-files - пытается открыть файлы в определенном порядке, открывает первый обнаруженный файл.
            # Например, такая конструкция: $uri $uri/index.html $uri.html =404; сначала пытается открыть $uri,
            # затем index.html, если не найден $uri.html,
            # и аж потом, если ни одного из предложных файлов не существует, выдает ошибку 404.

        # expires - задает время кэширования браузером отданного элемента, например, 1d - один день, 2h - два часа, 30s - 30 секунд.
    }

    #location / {
    #    rewrite ^/assets/(.*)$ /frontend/web/assets/$1 break;
    #    rewrite ^/css/(.*)$ /frontend/web/css/$1 break;
    #    rewrite ^/js/(.*)$ /frontend/web/js/$1 break;
    #    rewrite ^/images/(.*)$ /frontend/web/images/$1 break;
    #    rewrite ^/(.*)$ /frontend/web/index.php;
    #}

    location ~ .(php|phtml)$ {

        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param PATH_INFO $fastcgi_path_info;
        fastcgi_param SERVER_NAME $host;

        fastcgi_pass unix:/var/run/php/php7.1-fpm.sock;

        fastcgi_connect_timeout     30s;
        fastcgi_read_timeout        30s;
        fastcgi_send_timeout        60s;

        try_files $uri =404;
        internal;
    }

    # Media: images, icons, video, audio, HTC
    location ~* \.(?:jpg|jpeg|gif|png|ico|cur|svg|svgz|mp4|ogg|ogv|webm|htc)$ {
        expires 1M;
        access_log off;
        add_header Cache-Control "public";
        try_files $uri =404;
    }

    # CSS and Javascript
    location ~* \.(?:css|js)$ {
        #expires 24h;
        expires 1y;
        access_log off;
        add_header Cache-Control "public";
        try_files $uri =404;
    }

    location =  /robots.txt     { access_log off; log_not_found off; }

    # Не выполнять логирование для favicon:
    location =  /favicon.ico    { access_log off; log_not_found off; }
    location ~* /CHANGELOG      { access_log off; log_not_found off; deny all; }
    location ~* /LICENSE        { access_log off; log_not_found off; deny all; }
    location ~* /README         { access_log off; log_not_found off; deny all; }

    # Запретить доступ к файлам, начинающимся с точки:
    location ~* /\.             { access_log off; log_not_found off; deny all; }

    # Кэшировать обычные файлы на 90 дней:
    #location ~* ^.+\.(ogg|ogv|svg|svgz|eot|otf|woff|mp4|ttf|rss|atom|jpg|jpeg|gif|png|ico|zip|tgz|gz|rar|bz2|doc|xls|exe|ppt|tar|mid|midi|wav|bmp|rtf)$ {
    #    access_log off; log_not_found off; expires 90d;
    #}
}